// 5.3 Character sets [lex.charset]
// 5.4 Preprocessing tokens [lex.pptoken]
-// 5.5 Alternative tokens [lex.digraph]
// 5.6 Tokens [lex.token]
-// 5.7 Comments [lex.comment]
// 5.8 Header names [lex.header]
// 5.9 Preprocessing numbers [lex.ppnumber]
// 5.10 Identifiers [lex.name]
// 5.11 Keywords [lex.key]
// 5.12 Operators and punctuators [lex.operators]
-// 5.13 Literals [lex.literal]
// 5.13.1 Kinds of literals [lex.literal.kinds]
// 5.13.2 Integer literals [lex.icon]
// 5.13.3 Character literals [lex.ccon]
// 5.13.4 Floating-point literals [lex.fcon]
// 5.13.5 String literals [lex.string]
// 5.13.6 Boolean literals [lex.bool]
// 5.13.7 Pointer literals [lex.nullptr]
// 5.13.8 User-defined literals [lex.ext]

// 7.5 Primary expressions [expr.prim]
// 7.5.4 Names [expr.prim.id]
// 7.5.4.1 Unqualified names [expr.prim.id.unqual]
// 7.5.4.2 Qualified names [expr.prim.id.qual]
// 7.5.5 Lambda expressions [expr.prim.lambda]
// 7.5.5.2 Captures [expr.prim.lambda.capture]
// 7.5.6 Fold expressions [expr.prim.fold]
// 7.5.7 Requires expressions [expr.prim.req]
// 7.5.7.1 Simple requirements [expr.prim.req.simple]
// 7.5.7.2 Type requirements [expr.prim.req.type]
// 7.5.7.3 Compound requirements [expr.prim.req.compound]
// 7.5.7.4 Nested requirements [expr.prim.req.nested]

// 7.6.1 Postfix expressions [expr.post]

// 7.6.2 Unary expressions [expr.unary]
// 7.6.2.3 Await [expr.await]
// 7.6.2.6 noexcept operator [expr.unary.noexcept]
// 7.6.2.7 New [expr.new]
// 7.6.2.8 Delete [expr.delete]

